def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

dependencies{
    implementation project(':digio_esign_sdk')
    // Default
    implementation "androidx.core:core-ktx:1.3.1"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.72'
    implementation 'com.google.android.material:material:1.0.0'

// Mandatory
    implementation("com.squareup.okhttp3:okhttp:4.5.0")
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

// Required for AI camera,  ID card analysis, selfie  and face match
    implementation "androidx.camera:camera-camera2:1.1.0-alpha05"
    implementation "androidx.camera:camera-lifecycle:1.1.0-alpha05"
    implementation "androidx.camera:camera-view:1.0.0-alpha25"
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:16.1.7'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30


    defaultConfig {
        // TODO: Specify your own munique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.we3.nuniyoekyc"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }



}

flutter {
    source '../..'
}